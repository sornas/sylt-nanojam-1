x := 0.0
y := 0.0
size := 0.2

particles_bigger := l_gfx_particle_new!
particles_smaller := l_gfx_particle_new!
systems := (particles_bigger, particles_smaller)

init :: fn {
    l_bind_axis(0, "LeftX", "move_left")
    l_bind_axis(0, "LeftY", "move_up")
    l_bind_axis(0, "RightX", "size_up")

    for system in systems {
        l_gfx_particle_lifetime! system, (1.0, 1.5), "Square"

        l_gfx_particle_start_sx! system, (0.04, 0.06), "Uniform"
        l_gfx_particle_start_sy! system, (0.04, 0.06), "Uniform"
        l_gfx_particle_end_sx!   system, (0.0, 0.0), "Uniform"
        l_gfx_particle_end_sy!   system, (0.0, 0.0), "Uniform"

        l_gfx_particle_start_red!   system, (0.8, 0.8), "Uniform"
        l_gfx_particle_end_red!     system, (0.6, 0.6), "Uniform"
        l_gfx_particle_start_green! system, (0.0, 0.0), "Uniform"
        l_gfx_particle_end_green!   system, (0.0, 0.0), "Uniform"
        l_gfx_particle_start_blue!  system, (0.0, 0.0), "Uniform"
        l_gfx_particle_end_blue!    system, (0.0, 0.0), "Uniform"
        l_gfx_particle_start_alpha! system, (0.6, 0.8), "Uniform"
        l_gfx_particle_end_alpha!   system, (0.3, 0.4), "Uniform"

        l_gfx_particle_vel_magnitude! system, (0.9, 1.5), "Square"
    }
}

update :: fn delta: float {
    x += l_input_value("move_left") * delta
    y -= l_input_value("move_up") * delta

    for system in systems {
        l_gfx_particle_x! system, (x, x), "Uniform"
        l_gfx_particle_y! system, (y, y), "Uniform"
    }

    d_size := l_input_value("size_up")
    size += d_size * delta
    if size < 0.1 {
        size = 0.1
        l_gfx_particle_start_green! particles_smaller, (0.5, 0.8), "Uniform" // yellow
    } else {
        if size > 1.0 {
            size = 1.0
        }
        l_gfx_particle_start_green! particles_smaller, (0.0, 0.0), "Uniform" // yellow
    }

    for system in systems {
        l_gfx_particle_start_sx! system, (size / 4.0, size / 4.0 + size / 10.0 + 0.05), "Uniform"
        l_gfx_particle_start_sy! system, (size / 4.0, size / 4.0 + size / 10.0 + 0.05), "Uniform"

        vel_mid := size * 3.0
        l_gfx_particle_vel_magnitude! system, (vel_mid - 0.3, vel_mid + 0.3), "Square"
    }

    if l_random() < -1.05 * size + 1.25 {
        if d_size > 0.0 {
            l_gfx_particle_spawn! particles_bigger
        } else if d_size < 0.0 {
            l_gfx_particle_spawn! particles_smaller
        }
    }

    // size = 0.1 => 1.0
    // size = 1.0 => 0.2

    l_gfx_particle_update! particles_bigger, delta
    l_gfx_particle_update! particles_smaller, delta
}

draw :: fn {
    l_gfx_rect! x, y, size, size, (1.0, 0.2, 0.2)
    l_gfx_particle_render! particles_bigger
    l_gfx_particle_render! particles_smaller
}

// this could be a "default" in the language in some way.
// has some weird stuff that _will_ be the same for everyone who's new
start :: fn {
    l_bind_quit("quit") // ?
    init!

    iter := inf(0) // ?
    for _ in iter {
        _
        if l_input_down("quit") {
            break
        }

        l_update!
        update! l_delta!
        draw!
        l_render!
    }
}
